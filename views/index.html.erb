<!DOCTYPE html>
<html>
    <head>
        <title>Text Adventure</title>
        <style>
            body {
                background-color: black;
                color: #ffe800;
                font-family: monospace;
                margin: 0;
                padding: 0;
                overflow: hidden;
                display: flex;
                flex-direction: column;
                height: 100vh;
            }

            #terminal {
                border: 1px solid #ffe800;
                border-radius: 5px;
                padding: 10px 20px;
                border-radius: 5px;
                border: 1px solid ffe800;
                overflow: auto;
                flex-grow: 1;
                margin: 20px;
            }

            #terminal * {
                overflow-anchor: none;
            }

            #terminal-anchor {
                overflow-anchor: auto;
                height: 1px;
            }

            #output {
                margin: 0;
            }

            #input-container {
                border: 1px solid #ffe800;
                border-radius: 5px;
                padding: 10px;
                margin: 0 20px 20px 20px;
                display: flex;
                align-items: center;
                position: relative;
            }

            #input {
                background-color: black;
                color: #ffe800;
                font-family: monospace;
                font-size: 14px;
                border: none;
                outline: none;
                flex-grow: 1;
                padding: 5px;
                margin-right: 10px;
                caret-color: transparent;
            }

            #input::placeholder {
                color: #ffe800;
            }

            button {
                background-color: #ffe800;
                font-size: 18px;
                color: black;
                padding: 5px 10px;
                border: none;
                cursor: pointer;
            }

            #cursor {
                position: absolute;
                left: 16px;
                width: 10px;
                height: 50%;
                background-color: #ffe800;
            }

            .hint {
                color: #ff2c71;
            }

            .blink {
                animation: blink 1s step-end infinite;
            }

            @keyframes blink {

                0%,
                100% {
                    opacity: 1;
                }

                50% {
                    opacity: 0;
                }
            }
        </style>
        <script>
            const ENVIRONMENT = '<%= ENV['ENVIRONMENT'] %>';
            const PORT = '<%= ENV['PORT'] %>' || 3000;
            const WEBSOCKET_ENDPOINT_PROD = `wss://${window.document.location.host}`
            const WEBSOCKET_ENDPOINT_DEV = `ws://localhost:${PORT}`

            var ws;
            var typingTimer;
            var doneTypingInterval = 300; // Time in ms (0.3 seconds)

            function connect() {
                ws = new WebSocket(`${ENVIRONMENT === 'production' ? WEBSOCKET_ENDPOINT_PROD : WEBSOCKET_ENDPOINT_DEV}/socket`);

                ws.onopen = function (event) {
                    console.log('WebSocket opened');
                };

                ws.onmessage = function (event) {
                    console.log('Received: ' + JSON.stringify(event.data));
                    const yellowArtifactFront = '\u001b[0;33;49m';
                    const yellowArtifactBack = '\u001b[0m';
                    const purpleArtifact = '\u001b[0;35;49m';
                    const outputEl = document.getElementById('output');
                    let hint;
                    let incomingMessage = event.data.replaceAll(yellowArtifactFront, '');
                    incomingMessage = incomingMessage.replaceAll(yellowArtifactBack, '');

                    // process hints
                    if (incomingMessage.includes(purpleArtifact)) {
                        let hintIndex = incomingMessage.indexOf(purpleArtifact);
                        let hintText = incomingMessage.slice(hintIndex, incomingMessage.length);
                        hintText = hintText.slice(hintText.indexOf(purpleArtifact) + purpleArtifact.length, hintText.length);
                        hint = document.createElement('span');
                        hint.classList.add('hint');
                        hint.textContent = hintText;

                        // remove hint from rest of message
                        incomingMessage = incomingMessage.slice(0, hintIndex);
                    }

                    // Display the received message in the terminal
                    const incomingMessageEl = document.createElement('span');
                    incomingMessageEl.textContent = incomingMessage;
                    outputEl.appendChild(incomingMessageEl);
                    outputEl.appendChild(document.createElement('br'));

                    if (hint) {
                        outputEl.appendChild(hint);
                    }
                };

                ws.onerror = function (event) {
                    console.error('WebSocket error:', event);
                };

                ws.onclose = function (event) {
                    console.log('WebSocket closed', event);
                };
            }

            function sendCommand() {
                var command = document.getElementById('input').value;
                console.log('Sending: ' + command);
                ws.send(command);
                // Clear the input field
                document.getElementById('input').value = '';
                updateCursor();
                document.getElementById('terminal-anchor').scrollIntoView();
            }

            function updateCursor() {
                var cursorLeftPosition = 16;
                var input = document.getElementById('input');
                var cursor = document.getElementById('cursor');
                var inputLength = input.value.length;
                cursor.style.left = cursorLeftPosition + (inputLength * 8.4) + 'px';
            }

            function startTyping() {
                clearTimeout(typingTimer);
                document.getElementById('cursor').classList.remove('blink');
            }

            function doneTyping() {
                document.getElementById('cursor').classList.add('blink');
            }

            connect();

            document.addEventListener('DOMContentLoaded', (event) => {
                var input = document.getElementById('input');
                input.addEventListener('input', function () {
                    updateCursor();
                    startTyping();
                    clearTimeout(typingTimer);
                    typingTimer = setTimeout(doneTyping, doneTypingInterval);
                });
            });
        </script>
    </head>
    <body>
        <div id="terminal">
            <pre id="output"></pre>
            <div id="terminal-anchor"></div>
        </div>
        <div id="input-container">
            <div id="cursor" class="blink"></div>
            <input type="text" id="input" onkeydown="if (event.keyCode === 13) sendCommand()" autofocus>
            <button onclick="sendCommand()">Send</button>
        </div>
    </body>
</html>